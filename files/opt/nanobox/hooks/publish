#!/usr/bin/env ruby

# Publish the packed build, application, and cache
# 1 - Prepare for publishing by putting things back into the cache, and moving things into place
#
# local:
#   2 - rsync/copy into /mnt/*
#
# production:
#   2 - upload to warehouse

# curl -k http://192.168.0.100:7410/ping
#
# curl -H "x-auth-token: 123" http://192.168.0.100:7410/blobs/test -d "data"
#
# curl -H "x-auth-token: 123" http://192.168.0.100:7410/blobs/test
#
# curl -H "x-auth-token: 123" http://192.168.0.100:7410/blobs

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output
include Nanobox::Boxfile

# # 1 - Prepare for publishing by putting things back into the cache, and moving things into place
# if ::File.exist? "#{BUILD_DIR}/var/db/pkgin/cache"
#   directory "#{CACHE_DIR}/pkgin" do
#     owner 'gonano'
#     group 'gonano'
#     recursive true
#   end
# 
#   execute "Insert pkgin packages from cache for quick access" do
#     command <<-EOF
#       rsync \
#         -v \
#         -a \
#         --delete \
#         #{BUILD_DIR}/var/db/pkgin/cache/ \
#         #{CACHE_DIR}/pkgin
#     EOF
#     user 'gonano'
#     stream true
#     on_data { |data| logger.print subtask_info(data), 'debug' }
#   end
# end

# move the lib_dirs into place if this is a subsequent deploy
# build[:lib_dirs].each do |dir|
#   if ::File.exist? "#{CODE_DIR}/#{dir}"
#
#     # ensure the directory exists
#     logger.print(bullet("Inserting #{dir} into cache..."), 'debug')
#
#     directory "#{LIB_CACHE_DIR}/#{dir}" do
#       recursive true
#       owner 'gonano'
#     end
#
#     # copy (and remove) the lib dir for quick subsequent deploys
#     logger.print(process_start("Insert #{dir}"), 'debug')
#
#     execute "Insert #{dir} into cache for quick access" do
#       command <<-EOF
#         rsync \
#           -v \
#           -a \
#           --delete \
#           #{CODE_DIR}/#{dir}/ \
#           #{LIB_CACHE_DIR}/#{dir}
#       EOF
#       stream true
#       user 'gonano'
#       on_data { |data| logger.print subtask_info(data), 'debug' }
#     end
#
#     logger.print(process_end, 'debug')
#   end
# end
#
# excludes = (build[:lib_dirs] + %w(.git)).inject("") do |result, exclude|
#   result << "--exclude='#{exclude}' "
# end

# 2 - upload to warehouse
execute "publish build" do
  command <<-EOF
    tar -czf - -C #{DEPLOY_DIR} * \
      | curl \
        -k \
        -H "x-auth-token: #{payload[:warehouse_token]}" \
        https://#{payload[:warehouse]}:7410/blobs/build-#{payload[:build]} \
        -d @-
  EOF
end

execute "publish code" do
  command <<-EOF
    tar -czf - -C #{LIVE_DIR} * \
      | curl \
        -k \
        -H "x-auth-token: #{payload[:warehouse_token]}" \
        https://#{payload[:warehouse]}:7410/blobs/live-#{payload[:build]} \
        -d @-
  EOF
end
