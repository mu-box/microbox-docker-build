#!/usr/bin/env ruby

# Fetch the codebase and cache
#
# local:
#   1 - rsync the code from /share/code
#
# production:
#   1 - clone/checkout code from git repo
#
# all:
#   2 - setup/copy lib_dirs

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output

if payload[:platform] == 'local'
  # 1 - rsync the code from /share/code
  execute "rsync code" do
    command <<-EOF
      rsync \
        -v \
        -a \
        #{LOCAL_CODE_SRC_DIR}/ \
        #{CODE_DIR}
    EOF
    user 'gonano'
  end
end

if payload[:platform] == 'production'
  # 1 - clone/checkout code from git repo
  execute "clone code" do
    command "git clone #{payload[:code_repo]} #{CODE_DIR}"
    user 'gonano'
  end
end

# 2 - setup/copy lib_dirs
# move the lib_dirs into place if this is a subsequent deploy
lib_dirs.each do |dir|
  if not ::File.exist? "#{CODE_DIR}/dir" and ::File.exist? "#{LIB_CACHE_DIR}/#{dir}"

    # ensure the directory exists
    logger.print(bullet("Extracting #{dir} from cache..."), 'debug')

    directory "#{CODE_DIR}/#{dir}" do
      recursive true
    end

    # copy (and remove) the lib dir for quick subsequent deploys
    logger.print(process_start("Extract #{dir}"), 'debug')

    execute "extract #{dir} from cache for quick access" do
      command <<-EOF
        rsync \
          -v \
          -a \
          #{LIB_CACHE_DIR}/#{dir}/ \
          #{CODE_DIR}/#{dir}
      EOF
      stream true
      user 'gonano'
      on_data { |data| logger.print subtask_info(data), 'debug' }
    end

    logger.print(process_end, 'debug')
  end
end