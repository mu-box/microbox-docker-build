#!/usr/bin/env ruby

# Prepare the environment that the compiled application will run within
#
# 1 - setup/copy lib_dirs
# 2 - Run Boxfile before_prepare
# 3 - Run engine prepare script
# 4 - Run Boxfile after_prepare

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output
include Nanobox::Boxfile

# 1 - setup/copy lib_dirs
# move the lib_dirs into place if this is a subsequent deploy
build[:lib_dirs].each do |dir|
  if not ::File.exist? "#{CODE_DIR}/#{dir}" and ::File.exist? "#{LIB_CACHE_DIR}/#{dir}"

    # ensure the directory exists
    logger.print(bullet("Extracting #{dir} from cache..."), 'debug')

    directory "#{CODE_DIR}/#{dir}" do
      recursive true
    end

    logger.print(process_start("Extract #{dir}"), 'debug')

    execute "extract #{dir} from cache for quick access" do
      command <<-EOF
        rsync \
          -v \
          -a \
          #{LIB_CACHE_DIR}/#{dir}/ \
          #{CODE_DIR}/#{dir}
      EOF
      stream true
      user 'gonano'
      on_data { |data| logger.print subtask_info(data), 'debug' }
    end

    logger.print(process_end, 'debug')
  end
end

# 2 - Run before_prepare
build[:before_prepare].each do |cmd|
  logger.print(bullet("Before prepare running: #{cmd}"), 'debug')

  execute "Before prepare: #{cmd}" do
    command cmd
    cwd CODE_DIR
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end
end

# 3 - Run engine prepare script
logger.print(bullet("Running prepare hook..."), 'debug')

if ::File.exist? "#{ENGINE_DIR}/bin/prepare"

  logger.print(bullet("Prepare script detected, running now..."), 'debug')

  execute "prepare environment" do
    command %Q(#{ENGINE_DIR}/bin/prepare '#{engine_payload}')
    cwd "#{ENGINE_DIR}/bin"
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end
end

# 4 - Run after_prepare
build[:after_prepare].each do |cmd|
  logger.print(bullet("After prepare running: #{cmd}"), 'debug')

  execute "After prepare: #{cmd}" do
    command cmd
    cwd CODE_DIR
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end
end
