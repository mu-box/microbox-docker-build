#!/usr/bin/env ruby

# Pack the application and build into a release
#
# 1 - Run engine pack script
# 2 - Sync build
# 3 - Sync lib_dirs with cache
# 4 - Sync pkgsrc packages with cache

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output
include Nanobox::Boxfile

# 1 - Run engine pack script
logger.print(bullet("Running pack hook..."), 'debug')

if ::File.exist? "#{ENGINE_DIR}/#{registry('engine')}/bin/pack"

  logger.print(bullet("Pack script detected, running now..."), 'debug')

  execute "pack environment" do
    command %Q(#{ENGINE_DIR}/#{registry('engine')}/bin/pack '#{engine_payload}')
    cwd "#{ENGINE_DIR}/#{registry('engine')}/bin"
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data { |data| logger.print data }
  end
end

# 2 - rsync/copy into /mnt/*
logtap.print(process_start('Copy deploy env into place'), 'debug')
# NOTE: I wonder if we should move the exclude-from into publish when we rsync
# to slurp. That way, the 'dev' container will have everything. It might not
# be necessary though. 

execute "rsync build" do
  command <<-EOF
    rsync \
      -v \
      -a \
      --delete \
      --exclude-from=/var/nanobox/build-excludes.txt \
      #{DEPLOY_DIR}/ \
      #{BUILD_DIR}
  EOF
  user 'gonano'
  stream true
  on_data { |data| logtap.print subtask_info(data), 'debug' }
end

# 3 - Sync lib_dirs with cache
build[:lib_dirs].each do |dir|
  if ::File.exist? "#{CODE_DIR}/#{dir}"

    # ensure the directory exists
    logger.print(bullet("Inserting #{dir} into cache..."), 'debug')

    directory "#{LIB_CACHE_DIR}/#{dir}" do
      recursive true
      owner 'gonano'
    end

    # copy (and remove) the lib dir for quick subsequent deploys
    logger.print(process_start("Insert #{dir}"), 'debug')

    execute "Insert #{dir} into cache for quick access" do
      command <<-EOF
        rsync \
          -v \
          -a \
          --delete \
          #{CODE_DIR}/#{dir}/ \
          #{LIB_CACHE_DIR}/#{dir}
      EOF
      stream true
      user 'gonano'
      on_data { |data| logger.print subtask_info(data), 'debug' }
    end

    logger.print(process_end, 'debug')
  end
end

# 4 - Sync pkgsrc packages with cache
if ::File.exist? "#{BUILD_DIR}/var/db/pkgin/cache"
  directory "#{CACHE_DIR}/pkgin" do
    owner 'gonano'
    group 'gonano'
    recursive true
  end

  execute "Insert pkgin packages from cache for quick access" do
    command <<-EOF
      rsync \
        -v \
        -a \
        --delete \
        #{BUILD_DIR}/var/db/pkgin/cache/ \
        #{CACHE_DIR}/pkgin
    EOF
    user 'gonano'
    stream true
    on_data { |data| logger.print subtask_info(data), 'debug' }
  end
end
