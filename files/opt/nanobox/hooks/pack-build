#!/usr/bin/env ruby

# Pack the contents of the /data pkgsrc bootstrap into the 'build' directory
#
# The packed 'build' directory contains all of the binaries and packages
# required to build the application. This build directory is eventually
# mounted into the dev container.
#
# 1 - rsync /data to /mnt/build
# 2 - rsync engine into cache
# 3 - rsync pkgsrc cache into cache

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output
include Nanobox::Boxfile

# 1 - rsync/copy into /mnt/*
logger.print(bullet('Stashing build environment...'))

execute "rsync build" do
  command <<-EOF
    rsync \
      -a \
      --ignore-case \
      --delete \
      #{DATA_DIR}/ \
      #{BUILD_DIR}
  EOF
  user 'gonano'
end

# 2 - copy engine into cache

# remove the previous engine if it exists
if ::File.exist? "#{CACHE_DIR}/engine"
  directory "#{CACHE_DIR}/engine" do
    action :delete
  end
end

# create the engine cache directory
directory "#{CACHE_DIR}/engine" do
  owner 'gonano'
  group 'gonano'
  recursive true
end

# copy the current engine into cache
execute "rsync engine" do
  command <<-EOF
    rsync \
      -a \
      --ignore-case \
      --delete \
      #{ENGINE_DIR}/ \
      #{CACHE_DIR}/engine
  EOF
  user 'gonano'
end

# 2B - Copy user's home into the cache
if ::File.exist? "#{DATA_DIR}/var/home/gonano"
  directory "#{CACHE_DIR}/home" do
    owner 'gonano'
    group 'gonano'
    recursive true
  end

  logger.print(bullet('Stashing home into cache...'))

  execute "Insert user's home into cache for quick access" do
    command <<-EOF
      rsync \
        -a \
        --ignore-case \
        --delete \
        --exclude '.ssh' \
        #{DATA_DIR}/var/home/gonano/ \
        #{CACHE_DIR}/home
    EOF
    user 'gonano'
  end

end


# 3 - rsync pkgsrc cache into cache
if ::File.exist? "#{DATA_DIR}/var/db/pkgin/cache"
  directory "#{CACHE_DIR}/pkgin" do
    owner 'gonano'
    group 'gonano'
    recursive true
  end

  logger.print(bullet('Stashing pkg cache...'))

  execute "Insert pkgin packages into cache for quick access" do
    command <<-EOF
      rsync \
        -a \
        --ignore-case \
        --delete \
        #{DATA_DIR}/var/db/pkgin/cache/ \
        #{CACHE_DIR}/pkgin
    EOF
    user 'gonano'
  end

end
