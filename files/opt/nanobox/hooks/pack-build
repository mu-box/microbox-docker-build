#!/usr/bin/env ruby

# Pack the contents of the /data pkgsrc bootstrap into the 'build' directory
#
# The packed 'build' directory contains all of the binaries and packages
# required to build the application. This build directory is eventually
# mounted into the dev container.
#
# 1 - rsync /data to /mnt/build
# 2 - rsync lib_dirs into cache
# 3 - rsync pkgsrc cache into cache

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output
include Nanobox::Boxfile

# 1 - rsync/copy into /mnt/*
logger.print(process_start('Stashing build environment'))

execute "rsync build" do
  command <<-EOF
    siphon --prefix '   sync: ' -- \
      rsync \
        -a \
        --info=progress2 \
        --delete \
        #{DATA_DIR}/ \
        #{BUILD_DIR}
  EOF
  user 'gonano'
  stream true
  on_data { |data| logger.print data }
end

# 2 - rsync lib_dirs into cache
build[:lib_dirs].each do |dir|

  # ensure the lib_dir exists in cache
  directory "#{LIB_CACHE_DIR}/#{dir}" do
    recursive true
    owner 'gonano'
    group 'gonano'
  end

  if ::File.exist? "#{CODE_DIR}/#{dir}"

    logger.print(process_start("Stashing lib_dir '#{dir}'"))

    execute "rsync #{dir}" do
      command <<-EOF
        siphon --prefix '   sync: ' -- \
          rsync \
            -a \
            --delete \
            --info=progress2 \
            #{CODE_DIR}/#{dir}/ \
            #{LIB_CACHE_DIR}/#{dir}
      EOF
      stream true
      user 'gonano'
      on_data { |data| logger.print data }
    end
  end
end

# 3 - rsync pkgsrc cache into cache
if ::File.exist? "#{DATA_DIR}/var/db/pkgin/cache"
  directory "#{CACHE_DIR}/pkgin" do
    owner 'gonano'
    group 'gonano'
    recursive true
  end

  logger.print(process_start('Stashing pkg cache'))

  execute "Insert pkgin packages from cache for quick access" do
    command <<-EOF
      siphon --prefix '   sync: ' -- \
        rsync \
          -a \
          --info=progress2 \
          --delete \
          #{DATA_DIR}/var/db/pkgin/cache/ \
          #{CACHE_DIR}/pkgin
    EOF
    user 'gonano'
    stream true
    on_data { |data| logger.print data }
  end
end
