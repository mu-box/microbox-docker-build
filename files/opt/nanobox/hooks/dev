#!/usr/bin/env ruby

# Prepare the dev container for a dev session
#
# 1 - persist environment variables

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output

require 'yaml'
require 'ya2yaml'

logger.print(bullet('Running dev hook...'), 'debug')

# 1 - Set all environment variables
logger.print(bullet("Setting environment variables..."))

# make sure the env dir exists
directory DEV_ENV_DIR do
  recursive true
end

# and that it's owned by gonano
execute "chown gonano #{DEV_ENV_DIR}"

execute "iptables forward rule" do
	command "iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080"
	only_if {`iptables -t nat -C PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080 2>&1`.include?("iptables: No chain/target/match by that name.")}
end

(payload[:env] || {}).each do |key, value|

  if not key.empty?
    file "#{DEV_ENV_DIR}/#{key}" do
      content value
      owner 'gonano'
      group 'gonano'
      mode 0444
    end
  end
end

if payload[:boxfile]
  if not ::File.exist? CODE_DIR
    # create the dir if it doesn't exist
    directory CODE_DIR do
      recursive true
    end

    # change the owner to gonano
    execute "chown gonano #{CODE_DIR}"
  end
  payload_boxfile = (YAML::load(payload[:boxfile]) || {}).deep_symbolize_keys
  payload_boxfile_run_config = payload_boxfile[:"run.config"] || {}
  (payload_boxfile_run_config[:cache_dirs] || []).each do |dir|
    # 1 - Ensure the CODE_DIR exists
    # ensure the source exists
    execute "mkdir -p #{LIB_CACHE_DIR}/#{dir}" do
      user 'gonano'
      only_if {!:File.exists?("#{LIB_CACHE_DIR}/#{dir}")}
    end

    # ensure the destination exists
    execute "mkdir -p #{CODE_DIR}/#{dir}" do
      user 'gonano'
      only_if {!:File.exists?("#{CODE_DIR}/#{dir}")}
    end

    # bind mount the source onto the destination
    execute "mount -o bind #{LIB_CACHE_DIR}/#{dir} #{CODE_DIR}/#{dir}" do
      only_if {`mountpoint #{CODE_DIR}/#{dir}`.include?("#{CODE_DIR}/#{dir} is not a mountpoint")}
    end
  end

end
