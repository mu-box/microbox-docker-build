#!/usr/bin/env ruby

# Compile the application
#
# 1 - Remove previous app release if any
# 2 - extract the engine from cache
# 3 - rsync the code from /share/code
# 4 - Run engine compile script
# 5 - Run boxfile.yml extra_steps

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output
include Nanobox::Boxfile
include Nanobox::Hook

logger.print(bullet("Running compile hook..."), 'debug')

# 1 - Clear the APP_DIR
logger.print(bullet('Cleaning up any previous releases...'))

execute "Purge #{APP_DIR}" do
  command "rm -rf #{APP_DIR}/*"
end

# 2 - extract the engine from cache
execute "rsync engine" do
  command <<-EOF
    rsync \
      -a \
      --delete \
      #{CACHE_DIR}/engine/ \
      #{ENGINE_DIR}
  EOF
  user 'gonano'
end

# 3 - rsync the code from /share/code
logger.print(bullet('Copying code...'))
if ::File.exists? "#{LOCAL_CODE_SRC_DIR}/.nanoignore"
  execute "rsync code" do
    command <<-EOF
      rsync \
        -a \
        --exclude-from '#{LOCAL_CODE_SRC_DIR}/.nanoignore' \
        #{((['.nanoignore'] + build[:lib_dirs]).map {|dir| "--exclude '#{dir}'"}).join(' ')} \
        #{LOCAL_CODE_SRC_DIR}/ \
        #{CODE_DIR}
    EOF
    user 'gonano'
  end
else
  execute "rsync code" do
    command <<-EOF
      rsync \
        -a \
        #{LOCAL_CODE_SRC_DIR}/ \
        #{CODE_DIR}
    EOF
    user 'gonano'
  end
end

# 5 - Run engine compile script
if ::File.exist? "#{ENGINE_DIR}/bin/compile"

  logger.print(bullet("Compile script detected, running now..."), 'debug')

  execute "compile app" do
    command %Q(stdbuf -o0 #{ENGINE_DIR}/bin/compile '#{engine_payload}')
    cwd "#{ENGINE_DIR}/bin"
    path GONANO_PATH
    environment engine_env
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end
end

# 6 - Run extra_steps
build[:extra_steps].each_with_index do |cmd, i|

  logger.print(process_start("After compile hook #{i + 1}"))
  logger.print("   $ #{cmd}\n")

  execute "After compile: #{cmd}" do
    command <<-EOF
      stdbuf -o0 \
        siphon --prefix '  ' -- \
          bash -i -l -c "#{escape cmd}"
    EOF
    cwd CODE_DIR
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end

  logger.print(process_end)
end
