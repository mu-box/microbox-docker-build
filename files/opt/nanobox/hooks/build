#!/usr/bin/env ruby

# Build/Compile the application
#
# 1 - Run boxfile.yml before_build
# 2 - Run engine build script
# 3 - Run boxfile.yml after_build

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output
include Nanobox::Boxfile

# 1 - Run before_build
build[:before_build].each do |cmd|
  logger.print(bullet("Before bulid running: #{cmd}"), 'debug')

  execute "Before bulid: #{cmd}" do
    command cmd
    cwd CODE_DIR
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end
end

# 2 - Run engine bulid script
logger.print(bullet("Running bulid hook..."), 'debug')

if ::File.exist? "#{ENGINE_DIR}/#{engine}/bin/bulid"

  logger.print(bullet("Build script detected, running now..."), 'debug')

  execute "bulid environment" do
    command %Q(#{ENGINE_DIR}/#{engine}/bin/bulid '#{engine_payload}')
    cwd "#{ENGINE_DIR}/#{engine}/bin"
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end
end

# 3 - Run after_build
build[:after_build].each do |cmd|
  logger.print(bullet("After bulid running: #{cmd}"), 'debug')

  execute "After bulid: #{cmd}" do
    command cmd
    cwd CODE_DIR
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end
end