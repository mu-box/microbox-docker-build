#!/usr/bin/env ruby

# Allows an engine or Boxfile to setup an environment before the build process
#
# 1 - Run before_setup
# 2 - Run engine setup script
# 3 - Run after_setup

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output
include Nanobox::Boxfile
include Nanobox::Hook

logger.print(bullet("Running setup hook..."), 'debug')

# 1 - Run before_setup
(build[:before_setup] || []).each_with_index do |cmd, i|

  logger.print(process_start("Before setup hook #{i + 1}"))
  logger.print("   $ #{cmd}\n")

  execute "Before setup: #{cmd}" do
    command <<-EOF
      stdbuf -o0 \
        siphon --prefix '  ' -- \
          bash -c "#{escape cmd}"
    EOF
    cwd CODE_DIR
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end

  logger.print(process_end)
end

# 2 - Run engine setup script
if ::File.exist? "#{ENGINE_DIR}/bin/setup"

  execute "setup environment" do
    command %Q(#{ENGINE_DIR}/bin/setup '#{engine_payload}')
    cwd "#{ENGINE_DIR}/bin"
    path GONANO_PATH
    environment engine_env
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end
end

# 3 - Run after_setup
(build[:after_setup] || []).each_with_index do |cmd, i|

  logger.print(process_start("After setup hook #{i + 1}"))
  logger.print("   $ #{cmd}\n")

  execute "After setup: #{cmd}" do
    command <<-EOF
      stdbuf -o0 \
        siphon --prefix '  ' -- \
          bash -c "#{escape cmd}"
    EOF
    cwd CODE_DIR
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end

  logger.print(process_end)
end
