#!/usr/bin/env ruby

# Allows an engine or Boxfile to setup an environment before the build process
#
# 1 - Clear the BUILD_DIR, APP_DIR, and boxfile
# 2 - link the app source
# 3 - Extract the pkgin db from the cache
# 4 - Update pkgin db
# 5 - Install user-requested packages and dev_packages
# 6 - Run before_setup
# 7 - Run engine setup script
# 8 - Run after_setup

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# import some logic/helpers from lib/*.rb
include Nanobox::Engine
include Nanobox::Output
include Nanobox::Boxfile
include Nanobox::Hook

logger.print(bullet("Running setup hook..."), 'debug')

# 1 - Clear the BUILD_DIR, DEPLOY_DIR, and boxfile
logger.print(bullet('Cleaning up any previous builds...'))
[
  "#{BUILD_DIR}/*",
  "#{DEPLOY_DIR}/*",
  "#{CACHE_DIR}/boxfile.yml"
].each do |old|
  execute "Purge #{old}" do
    command "rm -rf #{old}"
  end
end

# 2 - link the app source
link CODE_DIR do
  to LOCAL_CODE_SRC_DIR
  owner "gonano"
end

# 3 - Extract the pkgin db from the cache
if ::File.exist? "#{CACHE_DIR}/pkgin"

  directory "#{DATA_DIR}/var/db/pkgin/cache" do
    owner 'gonano'
    group 'gonano'
    recursive true
  end

  logger.print(bullet('Extracting pkg cache...'))

  # fetch the pkgin cache & db from cache for a quick deploy
  execute "extract pkgin packages from cache for quick access" do
    command <<-EOF
      rsync \
        -a \
        #{CACHE_DIR}/pkgin/ \
        #{DATA_DIR}/var/db/pkgin/cache
    EOF
    user 'gonano'
  end

end

# 4 - Update pkgin db
logger.print(bullet('Updating pkg database...'))

execute "remove existing database" do
  command "rm -f #{DATA_DIR}/var/db/pkgin/pkgin.db"
  user 'gonano'
end

execute "update pkgin packages" do
  command <<-EOF
    #{DATA_DIR}/bin/pkgin -y up
  EOF
  user 'gonano'
end

# 5 - Install user-requested packages and dev_packages
packages = begin
  (build[:extra_packages] || []) + (build[:dev_packages] || [])
end

if packages.any?
  logger.print(process_start("Installing user-requested packages"))

  execute "Install packages" do
    command <<-EOF
      stdbuf -o0 \
        siphon --prefix '  ' -- \
          bash -c "/data/bin/pkgin -y in #{packages.join(' ')}"
    EOF
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data { |data| logger.print data }
  end

  logger.print(process_end)
end

# 6 - Run before_setup
(build[:before_setup] || []).each_with_index do |cmd, i|

  logger.print(process_start("Before setup hook #{i + 1}"))
  logger.print("   $ #{cmd}\n")

  execute "Before setup: #{cmd}" do
    command <<-EOF
      stdbuf -o0 \
        siphon --prefix '  ' -- \
          bash -i -l -c "#{escape cmd}"
    EOF
    cwd CODE_DIR
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end

  logger.print(process_end)
end

# 7 - Run engine setup script
if ::File.exist? "#{ENGINE_DIR}/bin/setup"

  execute "setup environment" do
    command %Q(#{ENGINE_DIR}/bin/setup '#{engine_payload}')
    cwd "#{ENGINE_DIR}/bin"
    path GONANO_PATH
    environment engine_env
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end
end

# 8 - Run after_setup
(build[:after_setup] || []).each_with_index do |cmd, i|

  logger.print(process_start("After setup hook #{i + 1}"))
  logger.print("   $ #{cmd}\n")

  execute "After setup: #{cmd}" do
    command <<-EOF
      stdbuf -o0 \
        siphon --prefix '  ' -- \
          bash -i -l -c "#{escape cmd}"
    EOF
    cwd CODE_DIR
    path GONANO_PATH
    user 'gonano'
    stream true
    on_data {|data| logger.print data}
  end

  logger.print(process_end)
end
